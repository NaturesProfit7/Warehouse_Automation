"""–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö."""

from datetime import datetime, timedelta
from typing import List, Optional
import asyncio

import httpx
from pydantic import BaseModel

from ..config import settings
from ..core.models import UrgencyLevel, CurrentStock, ReplenishmentRecommendation
from ..core.calculations import get_stock_calculator
from ..integrations.sheets import get_sheets_client
from ..services.stock_service import get_stock_service
from ..utils.logger import get_logger

logger = get_logger(__name__)


class NotificationConfig(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    critical_threshold_hours: int = 1  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–∞–∂–¥—ã–π —á–∞—Å
    high_threshold_hours: int = 8      # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤
    daily_summary_enabled: bool = True  # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞
    daily_summary_hour: int = 10       # –ß–∞—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ (10:30)
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    min_critical_items: int = 1        # –ú–∏–Ω–∏–º—É–º –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    max_items_per_message: int = 10    # –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏


class CriticalStockAlert(BaseModel):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö."""
    
    alert_type: str
    timestamp: datetime
    critical_items: List[ReplenishmentRecommendation]
    high_priority_items: List[ReplenishmentRecommendation]
    total_items_count: int
    message: str


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö."""
    
    def __init__(self):
        self.config = NotificationConfig()
        self.stock_calculator = get_stock_calculator()
        self.stock_service = get_stock_service()
        self.sheets_client = get_sheets_client()
        self._last_alerts = {}  # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
        
        logger.info("Notification service initialized", config=self.config.model_dump())
    
    async def check_critical_stock(self) -> Optional[CriticalStockAlert]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Returns:
            Optional[CriticalStockAlert]: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ None
        """
        try:
            logger.debug("Checking critical stock levels")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –º–∞—Å—Ç–µ—Ä-–∑–∞–≥–æ—Ç–æ–≤–∫–∏
            current_stocks = await self.stock_service.get_all_current_stock()
            master_blanks = self.sheets_client.get_master_blanks()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.stock_calculator.calculate_replenishment_needs(
                current_stocks, master_blanks
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            critical_items = [r for r in recommendations if r.urgency == UrgencyLevel.CRITICAL]
            high_priority_items = [r for r in recommendations if r.urgency == UrgencyLevel.HIGH]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if len(critical_items) < self.config.min_critical_items:
                logger.debug("No critical items found, skipping notification")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)
            if not self._should_send_critical_alert(critical_items, high_priority_items):
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            alert = CriticalStockAlert(
                alert_type="critical_stock",
                timestamp=datetime.now(),
                critical_items=critical_items[:self.config.max_items_per_message],
                high_priority_items=high_priority_items[:self.config.max_items_per_message],
                total_items_count=len(critical_items) + len(high_priority_items),
                message=self._format_critical_alert_message(critical_items, high_priority_items)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._last_alerts["critical_stock"] = datetime.now()
            
            logger.info(
                "Critical stock alert generated",
                critical_count=len(critical_items),
                high_priority_count=len(high_priority_items)
            )
            
            return alert
            
        except Exception as e:
            logger.error("Failed to check critical stock", error=str(e))
            return None
    
    async def send_telegram_alert(self, alert: CriticalStockAlert) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
        
        Args:
            alert: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not settings.TELEGRAM_BOT_TOKEN:
                logger.warning("Telegram bot token not configured, skipping notification")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            admin_ids = settings.TELEGRAM_ADMIN_USERS
            if not admin_ids:
                logger.warning("No admin user IDs configured, skipping notification")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            success_count = 0
            
            for admin_id in admin_ids:
                try:
                    await self._send_telegram_message(admin_id, alert.message)
                    success_count += 1
                    logger.debug("Alert sent to admin", admin_id=admin_id)
                except Exception as e:
                    logger.error("Failed to send alert to admin", admin_id=admin_id, error=str(e))
            
            logger.info(
                "Telegram alerts sent",
                alert_type=alert.alert_type,
                total_admins=len(admin_ids),
                successful_sends=success_count
            )
            
            return success_count > 0
            
        except Exception as e:
            logger.error("Failed to send telegram alert", error=str(e))
            return False
    
    async def generate_daily_summary(self) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º.
        
        Returns:
            Optional[str]: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∏–ª–∏ None
        """
        try:
            logger.debug("Generating daily summary")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            current_stocks = await self.stock_service.get_all_current_stock()
            master_blanks = self.sheets_client.get_master_blanks()
            recommendations = self.stock_calculator.calculate_replenishment_needs(
                current_stocks, master_blanks
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_skus = len(current_stocks)
            critical_count = sum(1 for r in recommendations if r.urgency == UrgencyLevel.CRITICAL)
            high_count = sum(1 for r in recommendations if r.urgency == UrgencyLevel.HIGH)
            need_order_count = sum(1 for r in recommendations if r.need_order)
            
            total_value = sum(s.on_hand for s in current_stocks)
            low_stock_count = sum(1 for s in current_stocks if s.on_hand < 50)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            summary = f"""üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å–∫–ª–∞–¥–∞</b>
üìÖ {datetime.now().strftime('%d.%m.%Y')}

üì¶ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ SKU: {total_skus}
‚Ä¢ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {total_value} —à—Ç
‚Ä¢ –ü–æ–∑–∏—Ü–∏–π —Å –æ—Å—Ç–∞—Ç–∫–æ–º &lt;50: {low_stock_count}

‚ö†Ô∏è <b>–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:</b>
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ: {critical_count} –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –í–∞–∂–Ω—ã–µ: {high_count} –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –í—Å–µ–≥–æ –∫ –∑–∞–∫–∞–∑—É: {need_order_count} –ø–æ–∑–∏—Ü–∏–π"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
            if critical_count > 0:
                critical_items = [r for r in recommendations if r.urgency == UrgencyLevel.CRITICAL]
                summary += "\n\nüö® <b>–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:</b>"
                
                for item in critical_items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø 5
                    summary += f"\n‚Ä¢ {item.blank_sku}: {item.on_hand} —à—Ç"
                
                if len(critical_items) > 5:
                    summary += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(critical_items) - 5} –ø–æ–∑–∏—Ü–∏–π"
            
            summary += "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
            
            logger.info("Daily summary generated", 
                       total_skus=total_skus, 
                       critical_count=critical_count,
                       need_order_count=need_order_count)
            
            return summary
            
        except Exception as e:
            logger.error("Failed to generate daily summary", error=str(e))
            return None
    
    def _should_send_critical_alert(
        self, 
        critical_items: List[ReplenishmentRecommendation],
        high_priority_items: List[ReplenishmentRecommendation]
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)."""
        
        last_alert = self._last_alerts.get("critical_stock")
        if not last_alert:
            return True  # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        hours_since_last = (datetime.now() - last_alert).total_seconds() / 3600
        
        if critical_items and hours_since_last >= self.config.critical_threshold_hours:
            return True
            
        if high_priority_items and hours_since_last >= self.config.high_threshold_hours:
            return True
            
        return False
    
    def _format_critical_alert_message(
        self,
        critical_items: List[ReplenishmentRecommendation],
        high_priority_items: List[ReplenishmentRecommendation]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö."""
        
        message = "üö® <b>–ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò!</b>\n\n"
        
        if critical_items:
            message += f"‚õî <b>–ö—Ä–∏—Ç–∏—á–Ω—ã–µ ({len(critical_items)}):</b>\n"
            for item in critical_items:
                stockout_info = ""
                if item.estimated_stockout:
                    days_left = (item.estimated_stockout - datetime.now().date()).days
                    if days_left <= 0:
                        stockout_info = " (—É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è)"
                    else:
                        stockout_info = f" ({days_left}–¥. –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è)"
                
                message += f"‚Ä¢ <b>{item.blank_sku}</b>: {item.on_hand} —à—Ç{stockout_info}\n"
        
        if high_priority_items:
            message += f"\n‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ ({len(high_priority_items)}):</b>\n"
            for item in high_priority_items:
                message += f"‚Ä¢ {item.blank_sku}: {item.on_hand} —à—Ç\n"
        
        message += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        
        return message
    
    async def _send_telegram_message(self, chat_id: int, message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
        
        url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
        
        data = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=data, timeout=30.0)
            response.raise_for_status()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_notification_service: NotificationService | None = None


def get_notification_service() -> NotificationService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ NotificationService."""
    global _notification_service
    
    if _notification_service is None:
        _notification_service = NotificationService()
    
    return _notification_service