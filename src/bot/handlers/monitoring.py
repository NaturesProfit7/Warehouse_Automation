"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã."""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from ...services.monitoring_service import get_monitoring_service, ComponentStatus
from ...services.scheduler_service import get_scheduler_service
from ...services.notification_service import get_notification_service
from ...utils.auth import admin_required
from ...utils.logger import get_logger

logger = get_logger(__name__)

router = Router()


@router.message(Command("health"))
@admin_required
async def cmd_health(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
    try:
        await message.reply("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        monitoring_service = get_monitoring_service()
        health = await monitoring_service.perform_health_check()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        status_emoji = {
            ComponentStatus.HEALTHY: "‚úÖ",
            ComponentStatus.WARNING: "‚ö†Ô∏è",
            ComponentStatus.CRITICAL: "‚ùå",
            ComponentStatus.UNKNOWN: "‚ùì"
        }
        
        status_text = {
            ComponentStatus.HEALTHY: "–ó–¥–æ—Ä–æ–≤",
            ComponentStatus.WARNING: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
            ComponentStatus.CRITICAL: "–ö—Ä–∏—Ç–∏—á–Ω–æ",
            ComponentStatus.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
        
        message_text = f"""üè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</b>
{status_emoji[health.overall_status]} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text[health.overall_status]}

‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {health.uptime_seconds // 3600}—á {(health.uptime_seconds % 3600) // 60}–º
üö® <b>–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b> {health.alerts_count}
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {health.warnings_count}

üìä <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>"""
        
        for comp_name, comp_health in health.components.items():
            comp_emoji = status_emoji[comp_health.status]
            comp_status = status_text[comp_health.status]
            
            response_time = ""
            if comp_health.response_time_ms:
                response_time = f" ({comp_health.response_time_ms}–º—Å)"
            
            error_info = ""
            if comp_health.error_message:
                error_info = f"\n  ‚îî {comp_health.error_message}"
            
            message_text += f"\n{comp_emoji} {comp_name.replace('_', ' ').title()}: {comp_status}{response_time}{error_info}"
        
        message_text += f"\n\nüïí –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {health.check_timestamp.strftime('%H:%M:%S')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã", callback_data="health_trends"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="health_refresh")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="scheduler_status"),
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_status")
            ]
        ])
        
        await message.reply(message_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error("Failed to get system health", error=str(e))
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {str(e)}")


@router.callback_query(F.data == "health_refresh")
@admin_required
async def callback_health_refresh(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        await callback.message.edit_text("üîç –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        monitoring_service = get_monitoring_service()
        health = await monitoring_service.perform_health_check()
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –≤ cmd_health)
        status_emoji = {
            ComponentStatus.HEALTHY: "‚úÖ",
            ComponentStatus.WARNING: "‚ö†Ô∏è", 
            ComponentStatus.CRITICAL: "‚ùå",
            ComponentStatus.UNKNOWN: "‚ùì"
        }
        
        status_text = {
            ComponentStatus.HEALTHY: "–ó–¥–æ—Ä–æ–≤",
            ComponentStatus.WARNING: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            ComponentStatus.CRITICAL: "–ö—Ä–∏—Ç–∏—á–Ω–æ", 
            ComponentStatus.UNKNOWN: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
        
        message_text = f"""üè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</b>
{status_emoji[health.overall_status]} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text[health.overall_status]}

‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {health.uptime_seconds // 3600}—á {(health.uptime_seconds % 3600) // 60}–º
üö® <b>–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b> {health.alerts_count}
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> {health.warnings_count}

üìä <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>"""
        
        for comp_name, comp_health in health.components.items():
            comp_emoji = status_emoji[comp_health.status]
            comp_status = status_text[comp_health.status]
            
            response_time = ""
            if comp_health.response_time_ms:
                response_time = f" ({comp_health.response_time_ms}–º—Å)"
            
            error_info = ""
            if comp_health.error_message:
                error_info = f"\n  ‚îî {comp_health.error_message}"
            
            message_text += f"\n{comp_emoji} {comp_name.replace('_', ' ').title()}: {comp_status}{response_time}{error_info}"
        
        message_text += f"\n\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {health.check_timestamp.strftime('%H:%M:%S')}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥—ã", callback_data="health_trends"),
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="health_refresh")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="scheduler_status"),
                InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_status")
            ]
        ])
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error("Failed to refresh health status", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")


@router.callback_query(F.data == "scheduler_status")
@admin_required
async def callback_scheduler_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    try:
        scheduler_service = get_scheduler_service()
        status = scheduler_service.get_job_status()
        
        if status["status"] == "stopped":
            message_text = "‚è∏Ô∏è <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
        else:
            message_text = f"""‚öôÔ∏è <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞</b>
üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–±–æ—Ç–∞–µ—Ç
üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {status['timezone']}
üìã <b>–ó–∞–¥–∞—á:</b> {len(status['jobs'])}

<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>"""
            
            for job in status['jobs']:
                next_run = "‚Äî"
                if job['next_run']:
                    try:
                        next_run_dt = datetime.fromisoformat(job['next_run'].replace('Z', '+00:00'))
                        next_run = next_run_dt.strftime('%H:%M:%S')
                    except:
                        next_run = job['next_run'][:19]
                
                message_text += f"\n‚Ä¢ <b>{job['name']}</b>\n  ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="health_refresh")]
        ])
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to get scheduler status", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")


@router.callback_query(F.data == "notifications_status")
@admin_required
async def callback_notifications_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª—É–∂–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        notification_service = get_notification_service()
        config = notification_service.config
        
        message_text = f"""üîî <b>–°–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ: –∫–∞–∂–¥—ã–µ {config.critical_threshold_hours}—á
‚Ä¢ –í–∞–∂–Ω—ã–µ: –∫–∞–∂–¥—ã–µ {config.high_threshold_hours}—á 
‚Ä¢ –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if config.daily_summary_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}
‚Ä¢ –ß–∞—Å —Å–≤–æ–¥–∫–∏: {config.daily_summary_hour}:00
‚Ä¢ –ú–∏–Ω–∏–º—É–º –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {config.min_critical_items}
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {config.max_items_per_message}

üì® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(notification_service, '_last_alerts') and notification_service._last_alerts:
            for alert_type, last_time in notification_service._last_alerts.items():
                time_str = last_time.strftime('%d.%m.%Y %H:%M')
                message_text += f"\n‚Ä¢ {alert_type}: {time_str}"
        else:
            message_text += "\n‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö", callback_data="test_critical_alert"),
                InlineKeyboardButton(text="üìä –°–≤–æ–¥–∫–∞ —Å–µ–π—á–∞—Å", callback_data="force_daily_summary")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="health_refresh")]
        ])
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to get notifications status", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


@router.callback_query(F.data == "test_critical_alert")
@admin_required
async def callback_test_critical_alert(callback: CallbackQuery):
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    try:
        await callback.answer("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞–ª–∏—à–∫–∏...")
        
        notification_service = get_notification_service()
        alert = await notification_service.check_critical_stock()
        
        if alert:
            await notification_service.send_telegram_alert(alert)
            await callback.message.reply("‚úÖ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            await callback.message.reply("‚ÑπÔ∏è –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–∞–ª–∏—à–∫—ñ–≤ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")
            
    except Exception as e:
        logger.error("Failed to test critical alert", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")


@router.callback_query(F.data == "force_daily_summary")
@admin_required
async def callback_force_daily_summary(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏."""
    try:
        await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É...")
        
        notification_service = get_notification_service()
        summary = await notification_service.generate_daily_summary()
        
        if summary:
            await callback.message.reply(summary)
        else:
            await callback.message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É")
            
    except Exception as e:
        logger.error("Failed to generate daily summary", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏")


@router.callback_query(F.data == "health_trends")
@admin_required
async def callback_health_trends(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
    try:
        monitoring_service = get_monitoring_service()
        summary = monitoring_service.get_system_summary()
        
        if "error" in summary:
            await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–¥–∞—Ö")
            return
        
        message_text = f"""üìà <b>–°–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üè• <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {summary['overall_status']}
‚è±Ô∏è <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {summary['uptime_hours']}—á
‚úÖ <b>–ó–¥–æ—Ä–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</b> {summary['healthy_components']}/{summary['total_components']}
üö® <b>–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º:</b> {summary['alerts_count']}
‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {summary['warnings_count']}

üìä <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>"""
        
        for comp_name, comp_info in summary['component_summary'].items():
            status_emoji = "‚úÖ" if comp_info['status'] == 'healthy' else "‚ö†Ô∏è" if comp_info['status'] == 'warning' else "‚ùå"
            response_time = f" ({comp_info['response_time_ms']}–º—Å)" if comp_info['response_time_ms'] else ""
            
            message_text += f"\n{status_emoji} {comp_name.replace('_', ' ').title()}{response_time}"
        
        message_text += f"\n\nüïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {summary['last_check'][:19]}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="health_refresh")]
        ])
        
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("Failed to get health trends", error=str(e))
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤")