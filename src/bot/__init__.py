"""Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞–º–∏."""

import asyncio
import logging
from typing import Any, Dict

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from ..config import settings
from ..utils.logger import get_logger
from .handlers import router
from .middleware import AuthMiddleware, LoggingMiddleware, StateMiddleware

logger = get_logger(__name__)


def create_bot() -> tuple[Bot, Dispatcher]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞."""

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º API aiogram 3.7+
    bot = Bot(
        token=settings.TELEGRAM_BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML")
    )

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.message.middleware(AuthMiddleware())
    dp.callback_query.middleware(AuthMiddleware())

    dp.message.middleware(LoggingMiddleware())
    dp.callback_query.middleware(LoggingMiddleware())

    dp.message.middleware(StateMiddleware())
    dp.callback_query.middleware(StateMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    dp.include_router(router)

    logger.info("Telegram bot created and configured")

    return bot, dp


async def start_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""

    try:
        bot, dp = create_bot()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        from aiogram.types import BotCommand

        commands = [
            BotCommand(command="start", description="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            BotCommand(command="receipt", description="–î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É"),
            BotCommand(command="report", description="–ó–≤—ñ—Ç –ø–æ –∑–∞–ª–∏—à–∫–∞–º"),
            BotCommand(command="health", description="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"),
            BotCommand(command="help", description="–î–æ–≤—ñ–¥–∫–∞"),
            BotCommand(command="cancel", description="–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é")
        ]

        await bot.set_my_commands(commands)
        logger.info("Bot commands set")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
        await _notify_startup(bot)

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        logger.info("Starting bot polling...")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise
    finally:
        if 'bot' in locals():
            await bot.session.close()


async def _notify_startup(bot: Bot) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""

    try:
        admin_ids = settings.TELEGRAM_ADMIN_USERS
        if not admin_ids:
            return

        startup_message = (
            "ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ</b>\n\n"
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏\n"
            "‚è∞ –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {}\n\n"
            "–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start"
        )

        from datetime import datetime
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        message_text = startup_message.format(current_time)

        for admin_id in admin_ids:
            try:
                await bot.send_message(admin_id, message_text, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"Failed to notify admin {admin_id} about startup: {e}")

    except Exception as e:
        logger.error(f"Failed to send startup notification: {e}")


async def stop_bot() -> None:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""

    logger.info("Stopping Telegram bot...")

    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å cleanup –ª–æ–≥–∏–∫—É
        pass
    except Exception as e:
        logger.error(f"Error during bot shutdown: {e}")


if __name__ == "__main__":
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞."""

    logging.basicConfig(level=logging.INFO)

    try:
        asyncio.run(start_polling())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
        raise
