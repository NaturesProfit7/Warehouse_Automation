"""Middleware –¥–ª—è Telegram –±–æ—Ç–∞."""

from collections.abc import Awaitable, Callable
from datetime import datetime
from typing import Any

from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery, Message, TelegramObject, User

from ..config import settings
from ..utils.logger import get_logger

logger = get_logger(__name__)


class AuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ whitelist."""

    async def __call__(
        self,
        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        user: User | None = data.get("event_from_user")
        if not user:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return await handler(event, data)

        user_id = user.id
        username = user.username or "unknown"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ whitelist
        if user_id not in settings.TELEGRAM_ALLOWED_USERS:
            # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            logger.warning(
                "Unauthorized access attempt",
                user_id=user_id,
                username=username,
                full_name=user.full_name
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞
            if isinstance(event, (Message, CallbackQuery)):
                await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await self._notify_admins_about_unauthorized_access(user, event, data)

            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        logger.info(
            "Authorized user action",
            user_id=user_id,
            username=username,
            is_admin=user_id in settings.TELEGRAM_ADMIN_USERS
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω—ã–µ
        data["is_admin"] = user_id in settings.TELEGRAM_ADMIN_USERS
        data["user_info"] = {
            "id": user_id,
            "username": username,
            "full_name": user.full_name
        }

        return await handler(event, data)

    async def _notify_admins_about_unauthorized_access(
        self,
        user: User,
        event: TelegramObject,
        data: dict[str, Any]
    ) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–ø—ã—Ç–∫–µ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."""

        try:

            bot = data.get("bot") if isinstance(event, TelegramObject) else None
            if not bot:
                return

            admin_ids = settings.TELEGRAM_ADMIN_USERS
            if not admin_ids:
                return

            message_text = (
                f"üö® –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name}\n"
                f"üÜî ID: {user.id}\n"
                f"üìù Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )

            for admin_id in admin_ids:
                try:
                    await bot.send_message(admin_id, message_text)
                except Exception as e:
                    logger.warning(f"Failed to notify admin {admin_id}: {e}")

        except Exception as e:
            logger.error(f"Failed to notify admins about unauthorized access: {e}")


class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    async def __call__(
        self,
        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: dict[str, Any]
    ) -> Any:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

        user_info = data.get("user_info", {})
        user_id = user_info.get("id", "unknown")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = type(event).__name__

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.debug(
            f"Processing {event_type}",
            user_id=user_id,
            event_type=event_type
        )

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await handler(event, data)

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            logger.info(
                f"Successfully processed {event_type}",
                user_id=user_id,
                event_type=event_type
            )

            return result

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(
                f"Error processing {event_type}",
                user_id=user_id,
                event_type=event_type,
                error=str(e),
                error_type=type(e).__name__
            )
            raise


class StateMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–æ–≤."""

    async def __call__(
        self,
        handler: Callable[[TelegramObject, dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: dict[str, Any]
    ) -> Any:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏."""

        from aiogram.fsm.context import FSMContext

        state: FSMContext = data.get("state")

        if state:
            # –î–æ–±–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            data["clear_state"] = state.clear
            data["set_state"] = state.set_state
            data["get_state"] = state.get_state
            data["get_data"] = state.get_data
            data["update_data"] = state.update_data

        return await handler(event, data)
