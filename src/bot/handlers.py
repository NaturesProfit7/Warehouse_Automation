"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞."""

import asyncio
from typing import Any

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from ..core.exceptions import StockCalculationError, IntegrationError, MappingError
from ..core.models import MovementSourceType
from ..services.stock_service import get_stock_service
from ..services.report_service import get_report_service
from ..utils.logger import get_logger
from .keyboards import (
    get_blank_type_keyboard,
    get_bone_size_keyboard,
    get_cancel_keyboard,
    get_color_keyboard,
    get_confirmation_keyboard,
    get_correction_type_keyboard,
    get_main_menu_keyboard,
    get_report_type_keyboard,
    get_ring_size_keyboard,
    get_round_size_keyboard,
    get_shaped_form_keyboard,
)
from .states import ReceiptStates

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()


# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

@router.message(Command("start"))
async def cmd_start(message: Message, user_info: dict[str, Any]) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""

    user_name = user_info.get("full_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")

    welcome_text = (
        f"üè≠ <b>–ü—Ä–∏–≤—ñ—Ç, {user_name}!</b>\n\n"
        f"–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∫–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–ª–∏—à–∫–∞–º–∏ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –¥–ª—è –∞–¥—Ä–µ—Å–Ω–∏–∫—ñ–≤.\n\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
        f"‚Ä¢ ‚ûï <b>–ü—Ä–∏—Ö–æ–¥</b> ‚Äî –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫\n"
        f"‚Ä¢ üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏</b> ‚Äî –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–∞–ª–∏—à–∫—ñ–≤\n"
        f"‚Ä¢ üìä <b>–û—Ç—á–µ—Ç</b> ‚Äî –∑–≤—ñ—Ç–∏ –ø–æ —Å–∫–ª–∞–¥—É\n"
        f"‚Ä¢ ‚öôÔ∏è <b>–ö–æ—Ä—Ä–µ–∫—Ü–∏—è</b> ‚Äî –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )

    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )

    logger.info("Start command executed", user_id=user_info.get("id"))


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""

    help_text = (
        "üÜò <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "‚Ä¢ /start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "‚Ä¢ /receipt ‚Äî —à–≤–∏–¥–∫–∏–π –¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∏—Ö–æ–¥—É\n"
        "‚Ä¢ /report ‚Äî —à–≤–∏–¥–∫–∏–π –∑–≤—ñ—Ç –ø–æ –∑–∞–ª–∏—à–∫–∞—Ö\n"
        "‚Ä¢ /cancel ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é\n"
        "‚Ä¢ /help ‚Äî —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "‚öôÔ∏è <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:</b>\n"
        "‚Ä¢ /correction <SKU> <–ö–Ü–õ–¨–ö–Ü–°–¢–¨> ‚Äî —à–≤–∏–¥–∫–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è\n\n"
        "‚ùì <b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?</b>\n"
        "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    )

    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("cancel"))
@router.callback_query(F.data == "cancel")
async def cancel_operation(update, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."""

    await state.clear()

    if isinstance(update, Message):
        await update.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
            reply_markup=get_main_menu_keyboard()
        )
    else:  # CallbackQuery
        await update.message.edit_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
            reply_markup=get_main_menu_keyboard()
        )
        await update.answer()


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    await callback.message.edit_text(
        "üè≠ <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# === –ü–†–ò–•–û–î –ó–ê–ì–û–¢–û–í–û–ö ===

@router.message(Command("receipt"))
@router.callback_query(F.data == "receipt")
async def start_receipt(update, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞."""

    await state.set_state(ReceiptStates.waiting_for_type)

    text = (
        "‚ûï <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É –∑–∞–≥–æ—Ç–æ–≤–æ–∫</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–≥–æ—Ç–æ–≤–∫–∏:"
    )

    if isinstance(update, Message):
        await update.answer(text, reply_markup=get_blank_type_keyboard(), parse_mode="HTML")
    else:  # CallbackQuery
        await update.message.edit_text(
            text,
            reply_markup=get_blank_type_keyboard(),
            parse_mode="HTML"
        )
        await update.answer()


@router.callback_query(ReceiptStates.waiting_for_type, F.data.startswith("type_"))
async def process_blank_type(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏."""

    blank_type = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º "type_"
    await state.update_data(blank_type=blank_type)

    if blank_type == "BONE":
        keyboard = get_bone_size_keyboard()
        text = "ü¶¥ <b>–ö—ñ—Å—Ç–∫–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:"
    elif blank_type == "RING":
        keyboard = get_ring_size_keyboard()
        text = "üü¢ <b>–ë—É–±–ª–∏–∫</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:"
    elif blank_type == "ROUND":
        keyboard = get_round_size_keyboard()
        text = "‚ö™ <b>–ö—Ä—É–≥–ª–∏–π</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:"
    elif blank_type == "SHAPED":
        keyboard = get_shaped_form_keyboard()
        text = "‚ù§Ô∏è <b>–§—ñ–≥—É—Ä–Ω–∏–π</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É:"
    else:
        await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–≥–æ—Ç–æ–≤–∫–∏")
        return

    await state.set_state(ReceiptStates.waiting_for_size)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(ReceiptStates.waiting_for_size, F.data.startswith("size_"))
async def process_blank_size(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏."""

    size = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º "size_"
    await state.update_data(size=size)
    await state.set_state(ReceiptStates.waiting_for_color)

    text = f"üìè <b>–†–æ–∑–º—ñ—Ä: {size} –º–º</b>\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä –º–µ—Ç–∞–ª—É:"

    await callback.message.edit_text(
        text,
        reply_markup=get_color_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(ReceiptStates.waiting_for_size, F.data.startswith("shape_"))
async def process_blank_shape(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã —Ñ–∏–≥—É—Ä–Ω–æ–π –∑–∞–≥–æ—Ç–æ–≤–∫–∏."""

    shape = callback.data[6:]  # –£–±–∏—Ä–∞–µ–º "shape_"
    # –î–ª—è —Ñ–∏–≥—É—Ä–Ω—ã—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫ —Ä–∞–∑–º–µ—Ä –≤—Å–µ–≥–¥–∞ 25–º–º
    await state.update_data(shape=shape, size="25")
    await state.set_state(ReceiptStates.waiting_for_color)

    shape_names = {
        "HEART": "‚ù§Ô∏è –°–µ—Ä—Ü–µ",
        "FLOWER": "üå∏ –ö–≤—ñ—Ç–∫–∞",
        "CLOUD": "‚òÅÔ∏è –•–º–∞—Ä–∫–∞"
    }

    shape_name = shape_names.get(shape, shape)
    text = f"{shape_name}\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä –º–µ—Ç–∞–ª—É:"

    await callback.message.edit_text(
        text,
        reply_markup=get_color_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(ReceiptStates.waiting_for_color, F.data.startswith("color_"))
async def process_blank_color(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏."""

    color = callback.data[6:]  # –£–±–∏—Ä–∞–µ–º "color_"
    await state.update_data(color=color)
    await state.set_state(ReceiptStates.waiting_for_quantity)

    # –§–æ—Ä–º–∏—Ä—É–µ–º SKU –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    data = await state.get_data()
    sku = _build_sku_from_data(data)

    color_names = {"GLD": "üü° –ó–æ–ª–æ—Ç–æ", "SIL": "‚ö™ –°—Ä—ñ–±–ª–æ"}
    color_name = color_names.get(color, color)

    text = (
        f"{color_name}\n\n"
        f"üè∑Ô∏è <b>SKU:</b> <code>{sku}</code>\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≥–æ—Ç–æ–≤–æ–∫:"
    )

    await callback.message.edit_text(text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")
    await callback.answer()


@router.message(ReceiptStates.waiting_for_quantity)
async def process_quantity_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""

    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            raise ValueError("Quantity must be positive")

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n"
            "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ:",
            reply_markup=get_cancel_keyboard()
        )
        return

    await state.update_data(quantity=quantity)

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 100, —Ç—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if quantity > 100:
        await state.set_state(ReceiptStates.waiting_for_confirmation)

        data = await state.get_data()
        sku = _build_sku_from_data(data)

        text = (
            f"‚ö†Ô∏è <b>–í–µ–ª–∏–∫–∞ –ø–∞—Ä—Ç—ñ—è!</b>\n\n"
            f"üè∑Ô∏è <b>SKU:</b> <code>{sku}</code>\n"
            f"üì¶ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {quantity} —à—Ç\n\n"
            f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É:"
        )

        await message.answer(
            text,
            reply_markup=get_confirmation_keyboard(large_quantity=True),
            parse_mode="HTML"
        )
    else:
        # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        await _save_receipt(message, state)


@router.callback_query(ReceiptStates.waiting_for_confirmation, F.data == "confirm_yes")
async def confirm_receipt(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞."""

    await _save_receipt(callback.message, state, is_callback=True)
    await callback.answer()


@router.callback_query(ReceiptStates.waiting_for_confirmation, F.data == "confirm_no")
async def decline_receipt(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞."""

    await state.set_state(ReceiptStates.waiting_for_quantity)

    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel:",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


# === –û–¢–ß–ï–¢–´ ===

@router.message(Command("report"))
@router.callback_query(F.data == "report")
async def show_report_menu(update) -> None:
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤."""

    text = "üìä <b>–ó–≤—ñ—Ç–∏ –ø–æ —Å–∫–ª–∞–¥—É</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:"

    if isinstance(update, Message):
        await update.answer(text, reply_markup=get_report_type_keyboard(), parse_mode="HTML")
    else:  # CallbackQuery
        await update.message.edit_text(
            text,
            reply_markup=get_report_type_keyboard(),
            parse_mode="HTML"
        )
        await update.answer()


@router.callback_query(F.data.startswith("report_"))
async def process_report_type(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞."""

    report_type = callback.data[7:]  # –£–±–∏—Ä–∞–µ–º "report_"

    reports = {
        "short": "üìã <b>–ö–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç</b>\n\nüîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
        "full": "üìÑ <b>–ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç</b>\n\nüîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
        "critical": "üî¥ <b>–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó</b>\n\nüîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."
    }

    text = reports.get(report_type, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–≤—ñ—Ç—É")

    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –æ—Ç—á–µ—Ç–æ–≤
        report_service = get_report_service()
        
        if report_type == "short":
            report_text = await report_service.generate_summary_report()
        elif report_type == "critical":
            report_text = await report_service.generate_critical_stock_report()
        elif report_type == "full":
            report_text = await report_service.generate_full_stock_report()
        else:
            report_text = "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–≤—ñ—Ç—É"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(report_text) > 4000:
            report_text = report_text[:4000] + "\n\n<i>...–∑–≤—ñ—Ç –æ–±—Ä—ñ–∑–∞–Ω–æ</i>"
            
    except Exception as e:
        logger.error("Failed to generate report", error=str(e), report_type=report_type)
        report_text = (
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É</b>\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )

    await callback.message.edit_text(
        report_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )


# === –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í) ===

@router.callback_query(F.data == "correction")
async def start_correction(callback: CallbackQuery, is_admin: bool) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."""

    if not is_admin:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É", show_alert=True)
        return

    text = "‚öôÔ∏è <b>–ö–æ—Ä–µ–∫—Ü—ñ—è –∑–∞–ª–∏—à–∫—ñ–≤</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:"

    await callback.message.edit_text(
        text,
        reply_markup=get_correction_type_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

@router.callback_query(F.data == "back_to_type")
async def back_to_type_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏."""

    await state.set_state(ReceiptStates.waiting_for_type)

    text = "‚ûï <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É –∑–∞–≥–æ—Ç–æ–≤–æ–∫</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–≥–æ—Ç–æ–≤–∫–∏:"

    await callback.message.edit_text(
        text,
        reply_markup=get_blank_type_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_size")
async def back_to_size_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–º–µ—Ä–∞."""

    data = await state.get_data()
    blank_type = data.get("blank_type")

    await state.set_state(ReceiptStates.waiting_for_size)

    if blank_type == "BONE":
        keyboard = get_bone_size_keyboard()
        text = "ü¶¥ <b>–ö—ñ—Å—Ç–∫–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:"
    elif blank_type == "RING":
        keyboard = get_ring_size_keyboard()
        text = "üü¢ <b>–ë—É–±–ª–∏–∫</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:"
    elif blank_type == "ROUND":
        keyboard = get_round_size_keyboard()
        text = "‚ö™ <b>–ö—Ä—É–≥–ª–∏–π</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä:"
    elif blank_type == "SHAPED":
        keyboard = get_shaped_form_keyboard()
        text = "‚ù§Ô∏è <b>–§—ñ–≥—É—Ä–Ω–∏–π</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É:"
    else:
        # Fallback
        await back_to_type_selection(callback, state)
        return

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def _build_sku_from_data(data: dict[str, Any]) -> str:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ SKU –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è."""

    blank_type = data.get("blank_type", "")
    size = data.get("size", "")
    color = data.get("color", "")
    shape = data.get("shape", "")

    # –î–ª—è —Ñ–∏–≥—É—Ä–Ω—ã—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É –∫–∞–∫ —Ç–∏–ø
    if blank_type == "SHAPED" and shape:
        sku_type = shape
    else:
        sku_type = blank_type

    return f"BLK-{sku_type}-{size}-{color}"


async def _save_receipt(message: Message, state: FSMContext, is_callback: bool = False) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏."""

    try:
        data = await state.get_data()
        sku = _build_sku_from_data(data)
        quantity = data.get("quantity", 0)
        user_id = message.from_user.id if message else None
        user_name = message.from_user.full_name if message else "Unknown"

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        stock_service = get_stock_service()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        movement = await stock_service.add_receipt_movement(
            blank_sku=sku,
            quantity=quantity,
            user=f"{user_name} ({user_id})" if user_id else user_name,
            note=f"–ü—Ä–∏—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –æ—Ç {user_name}",
            source_type=MovementSourceType.TELEGRAM
        )
        
        logger.info(
            "Receipt added successfully",
            sku=sku,
            quantity=quantity,
            balance_after=movement.balance_after,
            user_id=user_id,
            movement_id=str(movement.id)
        )

        text = (
            f"‚úÖ <b>–ü—Ä–∏—Ö–æ–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!</b>\n\n"
            f"üè∑Ô∏è <b>SKU:</b> <code>{sku}</code>\n"
            f"üì¶ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> +{quantity} —à—Ç\n"
            f"üìä <b>–ó–∞–ª–∏—à–æ–∫:</b> {movement.balance_after} —à—Ç\n\n"
            f"–û–ø–µ—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É."
        )

    except (StockCalculationError, MappingError, IntegrationError) as e:
        logger.error(
            "Failed to save receipt", 
            error=str(e),
            sku=sku,
            quantity=quantity,
            user_id=user_id
        )
        text = (
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!</b>\n\n"
            f"üè∑Ô∏è <b>SKU:</b> <code>{sku}</code>\n"
            f"üì¶ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> +{quantity} —à—Ç\n\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    
    except Exception as e:
        logger.error(
            "Unexpected error saving receipt",
            error=str(e),
            user_id=user_id
        )
        text = (
            f"‚ùå <b>–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞!</b>\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

    keyboard = get_main_menu_keyboard()

    if is_callback:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await state.clear()


# === –û–°–¢–ê–¢–ö–ò ===

@router.callback_query(F.data == "stock")
async def show_stock_info(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö."""
    
    await callback.message.edit_text(
        "üì¶ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–ª–∏—à–∫–∏</b>\n\nüîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
        parse_mode="HTML"
    )
    await callback.answer()
    
    try:
        stock_service = get_stock_service()
        current_stock = await stock_service.get_all_current_stock()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        grouped_stock = {}
        for stock in current_stock:
            sku_parts = stock.blank_sku.split('-')
            if len(sku_parts) >= 2:
                sku_type = sku_parts[1]
                if sku_type not in grouped_stock:
                    grouped_stock[sku_type] = []
                grouped_stock[sku_type].append(stock)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_lines = ["üì¶ <b>–ü–æ—Ç–æ—á–Ω—ñ –∑–∞–ª–∏—à–∫–∏</b>\n"]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_items = sum(stock.on_hand for stock in current_stock)
        low_stock_count = sum(1 for stock in current_stock if stock.on_hand <= 50)
        
        report_lines.append(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–∑–∏—Ü—ñ–π: {len(current_stock)}\n"
            f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {total_items} —à—Ç\n"
            f"‚Ä¢ –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å: {low_stock_count} –ø–æ–∑–∏—Ü—ñ–π\n\n"
        )
        
        # –¢–∏–ø—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫
        type_names = {
            "BONE": "ü¶¥ –ö—ñ—Å—Ç–∫–∞",
            "RING": "üü¢ –ë—É–±–ª–∏–∫", 
            "ROUND": "‚ö™ –ö—Ä—É–≥–ª–∏–π",
            "HEART": "‚ù§Ô∏è –°–µ—Ä—Ü–µ",
            "FLOWER": "üå∏ –ö–≤—ñ—Ç–∫–∞",
            "CLOUD": "‚òÅÔ∏è –•–º–∞—Ä–∫–∞"
        }
        
        for sku_type in ["BONE", "RING", "ROUND", "HEART", "FLOWER", "CLOUD"]:
            if sku_type in grouped_stock:
                type_name = type_names.get(sku_type, sku_type)
                report_lines.append(f"<b>{type_name}:</b>\n")
                
                for stock in sorted(grouped_stock[sku_type], key=lambda x: x.blank_sku):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–∞
                    if stock.on_hand <= 50:
                        status = "üî¥"
                    elif stock.on_hand <= 100:
                        status = "üü°"
                    else:
                        status = "‚úÖ"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º SKU –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    sku_display = stock.blank_sku.replace("BLK-", "").replace("-", " ")
                    report_lines.append(f"‚Ä¢ {sku_display}: {stock.on_hand} —à—Ç {status}\n")
                
                report_lines.append("\n")
        
        report_text = "".join(report_lines)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(report_text) > 4000:
            report_text = report_text[:4000] + "\n\n<i>...–∑–≤—ñ—Ç –æ–±—Ä—ñ–∑–∞–Ω–æ</i>"
            
    except Exception as e:
        logger.error("Failed to load stock info", error=str(e))
        report_text = (
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</b>\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    
    await callback.message.edit_text(
        report_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )
