#!/usr/bin/env python3
"""–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å KeyCRM API."""

import asyncio
import sys
import os
sys.path.append('src')

async def test_keycrm_integration():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ KeyCRM."""
    
    print("üîó –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò KeyCRM")
    print("="*60)
    
    try:
        from integrations.keycrm import get_keycrm_client
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç KeyCRM
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è KeyCRM –∫–ª–∏–µ–Ω—Ç–∞...")
        async with await get_keycrm_client() as client:
            print("   ‚úÖ KeyCRM –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID...")
            order_id = 4505  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            
            try:
                order = await client.get_order(order_id)
                print(f"   ‚úÖ –ó–∞–∫–∞–∑ {order_id} –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üì¶ Order ID: {order.id}")
                print(f"   üìä Status: {order.status}")
                print(f"   üë§ Client ID: {order.client_id}")
                print(f"   üí∞ Grand Total: {order.grand_total}")
                print(f"   üìã Items count: {len(order.items)}")
                
                if order.items:
                    print("   üì¶ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:")
                    for i, item in enumerate(order.items[:3]):
                        print(f"     {i+1}. {item.product_name} x {item.quantity} = {item.total}")
                else:
                    print("   ‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    print("   üí° –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            print(f"\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
            try:
                from datetime import date, timedelta
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                start_date = date.today() - timedelta(days=7)
                end_date = date.today()
                
                orders = await client.get_orders_by_date_range(start_date, end_date, limit=5)
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {len(orders)}")
                
                if orders:
                    print("   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:")
                    for order in orders[:3]:
                        print(f"     ‚Ä¢ Order {order.id}: {order.grand_total} (status: {order.status})")
                else:
                    print("   ‚ö†Ô∏è  –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            
            print(f"\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook payload –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            try:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º webhook payload
                webhook_payload = {
                    "event": "order.change_order_status",
                    "context": {
                        "id": order_id,
                        "status_id": 1,
                        "client_id": 12345,
                        "grand_total": 500.0
                    }
                }
                
                parsed_webhook = client.parse_webhook_payload(webhook_payload)
                print(f"   ‚úÖ Webhook payload —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   üì® Event: {parsed_webhook.event}")
                print(f"   üì¶ Order ID: {parsed_webhook.order_id}")
                print(f"   üìä Status: {parsed_webhook.order_status}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ webhook: {e}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_webhook_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook."""
    
    print(f"\n{'='*60}")
    print("üéØ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK")
    print("="*60)
    
    try:
        from webhook.handlers import KeyCRMWebhookHandler
        
        handler = KeyCRMWebhookHandler()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π webhook –æ—Ç KeyCRM
        webhook_payload = {
            "event": "order.change_order_status",
            "context": {
                "id": 4505,           # ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
                "status_id": 1,       # –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                "client_id": None,
                "grand_total": 500.0,
                "status_changed_at": "2025-08-26T18:30:00.000000Z"
            }
        }
        
        print("1Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook...")
        print(f"   üì® Event: {webhook_payload['event']}")
        print(f"   üì¶ Order ID: {webhook_payload['context']['id']}")
        print(f"   üìä Status ID: {webhook_payload['context']['status_id']}")
        
        result = await handler.handle_keycrm_webhook(webhook_payload, request_id="test_001")
        
        print(f"   ‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    # –¢–µ—Å—Ç 1: KeyCRM API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    api_success = await test_keycrm_integration()
    
    # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
    webhook_success = await test_webhook_processing()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n{'='*60}")
    print("üèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*60)
    
    print(f"KeyCRM API: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if api_success else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if webhook_success else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if api_success and webhook_success:
        print(f"\nüéâ –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"üìã –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ KeyCRM –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
    else:
        print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print(f"üîß –ù—É–∂–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")

if __name__ == "__main__":
    asyncio.run(main())