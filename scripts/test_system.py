#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã."""

import os
import sys
import asyncio
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º."""
    print(f"\nüîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        if result.stdout.strip():
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.stdout}")
    else:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        if result.stderr.strip():
            print(f"–û—à–∏–±–∫–∏:\n{result.stderr}")
        if result.stdout.strip():
            print(f"–í—ã–≤–æ–¥:\n{result.stdout}")
    
    return result.returncode == 0

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
    
    required_dirs = [
        'src/core',
        'src/services', 
        'src/integrations',
        'src/webhook',
        'src/bot',
        'src/scheduler',
        'src/utils',
        'tests'
    ]
    
    required_files = [
        'src/core/models.py',
        'src/core/calculations.py',
        'src/services/stock_service.py',
        'src/integrations/keycrm.py',
        'src/webhook/app.py',
        'src/bot/handlers.py',
        'src/scheduler/jobs.py',
        'requirements.txt',
        'pyproject.toml'
    ]
    
    all_good = True
    
    for dir_path in required_dirs:
        full_path = project_root / dir_path
        if full_path.exists():
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} - –µ—Å—Ç—å")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_path} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_good = False
    
    for file_path in required_files:
        full_path = project_root / file_path
        if full_path.exists():
            print(f"‚úÖ –§–∞–π–ª {file_path} - –µ—Å—Ç—å")
        else:
            print(f"‚ùå –§–∞–π–ª {file_path} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_good = False
    
    return all_good

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤")
    
    try:
        # Core modules
        from src.core.models import BlankType, MovementType, UrgencyLevel
        from src.core.exceptions import StockCalculationError, IntegrationError
        from src.core.validators import validate_blank_sku
        
        print("‚úÖ Core –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω—É–º—ã
        assert BlankType.RING == "RING"
        assert MovementType.ORDER == "order" 
        assert UrgencyLevel.CRITICAL == "critical"
        
        print("‚úÖ –≠–Ω—É–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        assert validate_blank_sku("BLK-RING-25-GLD") == True
        assert validate_blank_sku("invalid") == False
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def create_test_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞."""
    print("\n‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞")
    
    env_content = """# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
KEYCRM_API_TOKEN=test_token_123
KEYCRM_WEBHOOK_SECRET=test_webhook_secret
GSHEETS_ID=1ABC123test_sheet_id
GOOGLE_CREDENTIALS_JSON={"type":"service_account","project_id":"test"}
TELEGRAM_BOT_TOKEN=123:ABC-test_bot_token
TELEGRAM_CHAT_ID=123456789

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
LEAD_TIME_DAYS=14
SCRAP_PCT=0.05
TARGET_COVER_DAYS=30
MAX_RETRIES=3
RETRY_DELAY_SECONDS=1.0
"""
    
    env_path = project_root / '.env.test'
    
    try:
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {env_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env: {e}")
        return False

async def test_basic_calculations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤."""
    print("\nüßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤")
    
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        def calculate_urgency(on_hand, min_level):
            if on_hand <= min_level * 0.5:
                return "critical"
            elif on_hand <= min_level * 0.7:
                return "high" 
            elif on_hand <= min_level:
                return "medium"
            else:
                return "low"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        assert calculate_urgency(45, 100) == "critical"
        assert calculate_urgency(65, 100) == "high"
        assert calculate_urgency(95, 100) == "medium"
        assert calculate_urgency(150, 100) == "low"
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–±–∞–∑–æ–≤—ã–π)
        def find_product_mapping(product_name, size, color, mappings):
            for mapping in mappings:
                if (mapping['name'] == product_name and 
                    mapping['size'] == size and
                    mapping['color'] == color):
                    return mapping
            return None
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        mappings = [
            {'name': '–ê–¥—Ä–µ—Å–Ω–∏–∫ –±—É–±–ª–∏–∫', 'size': '25 –º–º', 'color': '–∑–æ–ª–æ—Ç–æ', 'sku': 'BLK-RING-25-GLD'}
        ]
        
        result = find_product_mapping('–ê–¥—Ä–µ—Å–Ω–∏–∫ –±—É–±–ª–∏–∫', '25 –º–º', '–∑–æ–ª–æ—Ç–æ', mappings)
        assert result is not None
        assert result['sku'] == 'BLK-RING-25-GLD'
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞")
    print("=" * 60)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    os.chdir(project_root)
    
    test_results = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    test_results.append(("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure()))
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    test_results.append(("–¢–µ—Å—Ç–æ–≤—ã–π .env", create_test_env_file()))
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    test_results.append(("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports()))
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    test_results.append(("–ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã", asyncio.run(test_basic_calculations())))
    
    # 5. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ pytest (–µ—Å–ª–∏ –µ—Å—Ç—å)
    test_results.append(("Pytest –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã", 
                        run_command("python3 -m pytest tests/test_basic.py -v", 
                                  "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤")))
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
    test_results.append(("–°–∏–Ω—Ç–∞–∫—Å–∏—Å Python", 
                        run_command("find src tests -name '*.py' -exec python3 -m py_compile {} \\;",
                                  "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤")))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    total = len(test_results)
    
    for test_name, result in test_results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:<12} {test_name}")
        if result:
            passed += 1
    
    print("=" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é.")
        
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Google Sheets API")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)