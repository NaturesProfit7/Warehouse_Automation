#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_scheduler_jobs():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    print("‚è∞ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    try:
        from src.scheduler.runner import SchedulerRunner
        from apscheduler.triggers.cron import CronTrigger
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫  
        runner = SchedulerRunner()
        scheduler = runner.create_scheduler()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        runner.scheduler = scheduler
        runner.add_jobs()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        jobs = scheduler.get_jobs()
        job_names = [job.id for job in jobs]
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(jobs)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        expected_jobs = [
            ('stock_check_morning', '10:00'),
            ('stock_check_afternoon', '15:00'), 
            ('stock_check_evening', '21:00'),
            ('daily_stock_calculation', '21:01'),
            ('weekly_analytics', 'Mon 10:30')
        ]
        
        for job_id, expected_time in expected_jobs:
            job = scheduler.get_job(job_id)
            if job:
                print(f"‚úÖ {job_id}: {job.name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è cron trigger
                if hasattr(job.trigger, 'fields'):
                    trigger_info = []
                    if hasattr(job.trigger.fields['hour'], 'expressions'):
                        hours = list(job.trigger.fields['hour'].expressions)[0].step
                        trigger_info.append(f"hour={hours}")
                    if hasattr(job.trigger.fields['minute'], 'expressions'):
                        minutes = list(job.trigger.fields['minute'].expressions)[0].step  
                        trigger_info.append(f"minute={minutes}")
                    
                    print(f"   Trigger: {trigger_info}")
            else:
                print(f"‚ùå Missing job: {job_id}")
                return False
                
        print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå Scheduler test failed: {e}")
        return False

def test_new_stock_check_function():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä—É—é –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤...")
    
    try:
        from src.scheduler.jobs import ScheduledJobs
        from src.core.models import CurrentStock
        
        jobs = ScheduledJobs()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SKU
        test_sku = "BLK-HEART-25-GLD"
        formatted = jobs._format_sku_for_message(test_sku)
        
        expected_elements = ["‚ù§Ô∏è", "–°–µ—Ä—Ü–µ", "25–º–º", "üü°"]
        for element in expected_elements:
            if element in formatted:
                print(f"‚úÖ SKU formatting contains: {element}")
            else:
                print(f"‚ùå SKU formatting missing: {element}")
                return False
                
        print("‚úÖ SKU formatting works correctly")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ check_stock_levels —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assert hasattr(jobs, 'check_stock_levels'), "check_stock_levels method exists"
        assert hasattr(jobs, '_send_combined_stock_alert'), "_send_combined_stock_alert method exists"
        assert hasattr(jobs, '_format_sku_for_message'), "_format_sku_for_message method exists"
        
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå Stock check function test failed: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    print("üöÄ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...\n")
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞", test_scheduler_jobs),
        ("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤", test_new_stock_check_function)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                break
        except Exception as e:
            print(f"‚ùå {test_name} test crashed: {e}")
            break
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {passed}/{total}")
    
    if passed == total:
        print("üéâ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º!")
        print("\n–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print("‚Ä¢ 10:00 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (üü°üî¥)")  
        print("‚Ä¢ 15:00 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (üü°üî¥)")
        print("‚Ä¢ 21:00 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (üü°üî¥)")
        print("‚Ä¢ 21:01 - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç")
        print("‚Ä¢ –ü–Ω 10:30 - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        return True
    else:
        print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)