#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –∏–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    try:
        from src.core.models import Movement, CurrentStock, ReplenishmentRecommendation
        print("‚úÖ Core models imported successfully")
    except Exception as e:
        print(f"‚ùå Core models import failed: {e}")
        return False
        
    try:
        from src.scheduler.jobs import ScheduledJobs
        print("‚úÖ Scheduler jobs imported successfully")
    except Exception as e:
        print(f"‚ùå Scheduler jobs import failed: {e}")
        return False
        
    try:
        from src.scheduler.runner import SchedulerRunner
        print("‚úÖ Scheduler runner imported successfully")
    except Exception as e:
        print(f"‚ùå Scheduler runner import failed: {e}")
        return False
        
    try:
        from src.bot.keyboards import get_main_menu_keyboard, get_blank_type_keyboard
        print("‚úÖ Bot keyboards imported successfully")
    except Exception as e:
        print(f"‚ùå Bot keyboards import failed: {e}")
        return False
        
    try:
        from src.bot.handlers import router
        print("‚úÖ Bot handlers imported successfully")
    except Exception as e:
        print(f"‚ùå Bot handlers import failed: {e}")
        return False
        
    return True

def test_scheduler_job_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    
    try:
        from src.scheduler.jobs import ScheduledJobs
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API)
        class MockClient:
            def get_master_blanks(self):
                return []
            def get_current_stock(self):
                return []
                
        class MockService:
            async def get_all_current_stock(self):
                return []
                
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
        jobs = ScheduledJobs()
        jobs.sheets_client = MockClient()
        jobs.stock_service = MockService()
        
        print("‚úÖ ScheduledJobs created successfully with mocks")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        assert hasattr(jobs, 'check_stock_levels'), "check_stock_levels method exists"
        assert hasattr(jobs, 'daily_stock_calculation'), "daily_stock_calculation method exists"
        assert hasattr(jobs, '_send_combined_stock_alert'), "_send_combined_stock_alert method exists"
        
        print("‚úÖ All required methods exist")
        return True
        
    except Exception as e:
        print(f"‚ùå Scheduler job creation failed: {e}")
        return False

def test_keyboard_localization():
    """–¢–µ—Å—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É—é –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        from src.bot.keyboards import get_main_menu_keyboard
        
        keyboard = get_main_menu_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –∫–Ω–æ–ø–∫–∞—Ö
        buttons_text = []
        for row in keyboard.inline_keyboard:
            for button in row:
                buttons_text.append(button.text)
                
        expected_texts = ["–ü–æ—Å—Ç–∞–≤–∫–∞", "–ó–∞–ª–∏—à–∫–∏", "–ó–≤—ñ—Ç", "–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è", "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"]
        
        for expected in expected_texts:
            found = any(expected in text for text in buttons_text)
            if found:
                print(f"‚úÖ Found localized text: {expected}")
            else:
                print(f"‚ùå Missing localized text: {expected}")
                return False
                
        print("‚úÖ All keyboard localization successful")
        return True
        
    except Exception as e:
        print(f"‚ùå Keyboard localization test failed: {e}")
        return False

def test_sheets_cleanup_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –æ—á–∏—Å—Ç–∫–∏ Google Sheets."""
    print("\nüßπ –¢–µ—Å—Ç–∏—Ä—É—é –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏ Google Sheets...")
    
    try:
        from src.integrations.sheets import GoogleSheetsClient
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã
        assert hasattr(GoogleSheetsClient, 'clear_worksheet_data'), "clear_worksheet_data method exists"
        assert hasattr(GoogleSheetsClient, 'clear_data_sheets'), "clear_data_sheets method exists"
        
        print("‚úÖ Google Sheets cleanup methods added successfully")
        return True
        
    except Exception as e:
        print(f"‚ùå Sheets cleanup methods test failed: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", test_scheduler_job_creation), 
        ("–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è", test_keyboard_localization),
        ("–û—á–∏—Å—Ç–∫–∞ Sheets", test_sheets_cleanup_methods)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå {test_name} test crashed: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤: {passed}/{total} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)