#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ KeyCRM –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü."""

import asyncio
from datetime import datetime, timedelta
from typing import List
from uuid import uuid4

from src.integrations.keycrm import KeyCRMClient
from src.integrations.sheets import get_sheets_client
from src.core.models import Movement, MovementType, MovementSourceType
from src.utils.logger import get_logger

logger = get_logger(__name__)


async def import_keycrm_orders(days_back: int = 30) -> None:
    """
    –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ KeyCRM –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    
    Args:
        days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    """
    try:
        logger.info(f"Starting import of KeyCRM orders for last {days_back} days...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        keycrm_client = KeyCRMClient()
        sheets_client = get_sheets_client()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤
        product_mappings = sheets_client.get_product_mappings()
        mapping_dict = {}
        for mapping in product_mappings:
            key = (mapping.product_name, mapping.size_property, mapping.metal_color)
            mapping_dict[key] = mapping
        
        logger.info(f"Loaded {len(product_mappings)} product mappings")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        logger.info(f"Fetching orders from {start_date.date()} to {end_date.date()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ KeyCRM —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–º–∞–∫—Å 5 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∞)
        all_orders = []
        page = 1
        max_pages = 10  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        
        while page <= max_pages:
            # –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            params = {
                "start_date": start_date.date().isoformat(),
                "end_date": end_date.date().isoformat(),
                "page": page,
                "limit": 100  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            }
            
            logger.info(f"Fetching page {page}...")
            response = await keycrm_client.client.get("/order", params=params)
            response.raise_for_status()
            
            data = response.json()
            orders_data = data.get("data", [])
            
            if not orders_data:
                break
                
            # –ü–∞—Ä—Å–∏–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page_orders = []
            for order_data in orders_data:
                order = keycrm_client._parse_order_response(order_data)
                page_orders.append(order)
            
            all_orders.extend(page_orders)
            logger.info(f"Page {page}: {len(page_orders)} orders (total: {len(all_orders)})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if not data.get("next_page_url"):
                break
                
            page += 1
            
        orders = all_orders
        
        logger.info(f"Retrieved {len(orders)} orders from KeyCRM")
        
        movements_to_add = []
        unmapped_items = []
        total_processed = 0
        cancelled_orders = 0
        
        for order_preview in orders:
            order_id = order_preview.id
            order_status = order_preview.status.lower()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            if order_status in ["–æ—Ç–º–µ–Ω–µ–Ω", "–æ—Ç–º–µ–Ω—ë–Ω", "–æ—Ç–º–µ–Ω–∞", "cancelled"]:
                logger.debug(f"Skipping cancelled order {order_id}")
                cancelled_orders += 1
                continue
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–∫–∞–∑ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            try:
                full_order = await keycrm_client.get_order(order_id)
                order_date = full_order.created_at
                
                # –î–µ–ª–∞–µ–º –¥–∞—Ç—É naive –µ—Å–ª–∏ –æ–Ω–∞ aware
                if order_date.tzinfo is not None:
                    order_date = order_date.replace(tzinfo=None)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
                order_items = full_order.items
                
                if not order_items:
                    logger.debug(f"Order {order_id} has no items")
                    continue
                    
            except Exception as e:
                logger.warning(f"Failed to fetch full order {order_id}: {e}")
                continue
            
            for item in order_items:
                total_processed += 1
                
                product_name = item.product_name.strip()
                quantity = item.quantity
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
                properties = item.properties
                size_property = ""
                metal_color = ""
                
                # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä –∏ —Ü–≤–µ—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö
                for prop_name, prop_value in properties.items():
                    prop_name = prop_name.lower()
                    if "—Ä–æ–∑–º—ñ—Ä" in prop_name or "—Ä–∞–∑–º–µ—Ä" in prop_name:
                        size_property = prop_value
                    elif "–∫–æ–ª—ñ—Ä" in prop_name or "—Ü–≤–µ—Ç" in prop_name:
                        metal_color = prop_value
                
                # –ò—â–µ–º –º–∞–ø–ø–∏–Ω–≥
                mapping_key = (product_name, size_property, metal_color)
                mapping = mapping_dict.get(mapping_key)
                
                if not mapping:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
                    for key, map_item in mapping_dict.items():
                        if key[0] == product_name:
                            mapping = map_item
                            logger.warning(f"Using partial mapping for {product_name}")
                            break
                
                if mapping and mapping.active:
                    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
                    total_qty = quantity * mapping.qty_per_unit
                    
                    movement = Movement(
                        id=uuid4(),
                        timestamp=order_date,
                        type=MovementType.ORDER,
                        source_type=MovementSourceType.KEYCRM_WEBHOOK,
                        source_id=f"IMPORT_{order_id}_{item.id}",
                        blank_sku=mapping.blank_sku,
                        qty=-total_qty,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
                        balance_after=0,  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –ø–æ–∑–∂–µ
                        user="KEYCRM_IMPORT",
                        note=f"–ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–∞ #{order_id}: {product_name}",
                        hash=f"import_{order_id}_{item.id}_{mapping.blank_sku}_{total_qty}"
                    )
                    
                    movements_to_add.append(movement)
                    
                else:
                    # –¢–æ–≤–∞—Ä –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
                    logger.warning(f"No mapping found for: {product_name} | {size_property} | {metal_color}")
                    unmapped_items.append({
                        "order_id": order_id,
                        "product_name": product_name,
                        "size_property": size_property,
                        "metal_color": metal_color,
                        "quantity": quantity
                    })
        
        logger.info(f"Processed {total_processed} order items")
        logger.info(f"Mapped movements: {len(movements_to_add)}")
        logger.info(f"Unmapped items: {len(unmapped_items)}")
        
        if movements_to_add:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏—è –≤ Google Sheets
            logger.info("Adding movements to Google Sheets...")
            sheets_client.add_movements(movements_to_add)
            logger.info(f"‚úÖ Added {len(movements_to_add)} movements to Sheets")
        
        if unmapped_items:
            logger.warning(f"‚ö†Ô∏è  {len(unmapped_items)} items could not be mapped:")
            for item in unmapped_items[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                logger.warning(f"  - {item['product_name']} | {item['size_property']} | {item['metal_color']}")
            if len(unmapped_items) > 10:
                logger.warning(f"  ... and {len(unmapped_items) - 10} more")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ SKU
        print("\nüìä –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ SKU:")
        sku_totals = {}
        for movement in movements_to_add:
            sku = movement.blank_sku
            qty = abs(movement.qty)
            sku_totals[sku] = sku_totals.get(sku, 0) + qty
        
        for sku, total in sorted(sku_totals.items(), key=lambda x: x[1], reverse=True):
            print(f"  {sku}: -{total} —à—Ç")
        
        print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(orders)}")
        print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {cancelled_orders}")
        print(f"üìà –í—Å–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–π: {len(movements_to_add)}")
        print(f"‚ö†Ô∏è  –ù–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(unmapped_items)}")
        
    except Exception as e:
        logger.error(f"Failed to import KeyCRM orders: {e}")
        raise


if __name__ == "__main__":
    try:
        days_back = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ") or "30")
        asyncio.run(import_keycrm_orders(days_back))
    except KeyboardInterrupt:
        logger.info("Import cancelled by user")
    except Exception as e:
        logger.error(f"Import failed: {e}")
        import sys
        sys.exit(1)