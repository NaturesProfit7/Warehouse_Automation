#!/usr/bin/env python3
"""–¢–µ—Å—Ç KeyCRM OpenAPI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º endpoint."""

import asyncio
import httpx
import os
from dotenv import load_dotenv

async def test_keycrm_openapi():
    """–¢–µ—Å—Ç KeyCRM OpenAPI —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π."""
    
    load_dotenv()
    api_token = os.getenv("KEYCRM_API_TOKEN")
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KeyCRM OpenAPI")
    print("="*60)
    print("–°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
    print("‚Ä¢ URL: https://openapi.keycrm.app")
    print("‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: Bearer + APIkey")
    print("‚Ä¢ –õ–∏–º–∏—Ç: 60 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É")
    print("‚Ä¢ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: UTC (GMT+0)")
    print(f"‚Ä¢ –¢–æ–∫–µ–Ω: {api_token[:15]}...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    headers = {
        "Authorization": f"Bearer {api_token}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    base_url = "https://openapi.keycrm.app"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
    test_endpoints = [
        {
            "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ ID",
            "path": "/orders/4505",  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            "method": "GET"
        },
        {
            "name": "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤",
            "path": "/orders", 
            "method": "GET",
            "params": {"limit": 5}
        }
    ]
    
    async with httpx.AsyncClient(base_url=base_url, timeout=15.0) as client:
        for test in test_endpoints:
            print(f"\nüß™ {test['name']}")
            print(f"URL: {base_url}{test['path']}")
            
            try:
                if test['method'] == 'GET':
                    response = await client.get(
                        test['path'],
                        headers=headers,
                        params=test.get('params', {})
                    )
                
                print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"Content-Type: {response.headers.get('Content-Type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} bytes")
                
                if response.status_code == 200:
                    content_type = response.headers.get('Content-Type', '')
                    if 'application/json' in content_type:
                        try:
                            data = response.json()
                            print(f"‚úÖ –£–°–ü–ï–•! JSON –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
                            
                            if isinstance(data, dict):
                                print(f"–ö–ª—é—á–∏: {list(data.keys())}")
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑
                                if 'id' in data:
                                    print(f"üì¶ Order ID: {data.get('id')}")
                                    print(f"üìä Status: {data.get('status', 'N/A')}")
                                    print(f"üë§ Client ID: {data.get('client_id', 'N/A')}")
                                    print(f"üí∞ Total: {data.get('grand_total', 'N/A')}")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
                                    items = data.get('order_items', [])
                                    if items:
                                        print(f"üìã –ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: {len(items)}")
                                        for i, item in enumerate(items[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                                            print(f"  {i+1}. {item.get('product_name', 'N/A')} x {item.get('quantity', 0)}")
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                                elif 'data' in data or isinstance(data, list):
                                    orders = data.get('data', data) if isinstance(data, dict) else data
                                    if isinstance(orders, list):
                                        print(f"üìã –ó–∞–∫–∞–∑–æ–≤ –≤ —Å–ø–∏—Å–∫–µ: {len(orders)}")
                                        for order in orders[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                                            print(f"  ‚Ä¢ Order {order.get('id')}: {order.get('grand_total')} ({order.get('status')})")
                            
                            print(f"üéâ API –†–ê–ë–û–¢–ê–ï–¢! –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
                            return True
                            
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                            print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
                    else:
                        print(f"‚ùå –ù–µ JSON –æ—Ç–≤–µ—Ç: {content_type}")
                        print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
                elif response.status_code == 401:
                    print(f"üîë –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
                    print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω")
                    print("‚Ä¢ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫") 
                    print("‚Ä¢ API –¥–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    
                elif response.status_code == 403:
                    print(f"üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù")
                    print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("‚Ä¢ –£ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤")
                    print("‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (60/–º–∏–Ω)")
                    
                elif response.status_code == 404:
                    print(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û")
                    if "orders/" in test['path']:
                        print("‚Ä¢ –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print("‚Ä¢ Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                else:
                    print(f"‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                    print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê: {e}")
    
    return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    success = await test_keycrm_openapi()
    
    print(f"\n{'='*60}")
    if success:
        print("üéâ KeyCRM OpenAPI –†–ê–ë–û–¢–ê–ï–¢!")
        print("‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø–æ–ª–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã")
        print("‚úÖ Webhook + API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("‚ùå KeyCRM OpenAPI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üîß –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –∞–¥–º–∏–Ω–∫–µ KeyCRM")
    print(f"{'='*60}")

if __name__ == "__main__":
    asyncio.run(main())