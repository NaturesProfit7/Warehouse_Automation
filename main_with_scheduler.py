#!/usr/bin/env python3
"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º."""

import asyncio
import logging
import signal
from typing import Optional
from datetime import datetime

from src.bot import create_bot
from src.services.scheduler_service import get_scheduler_service
from src.services.stock_service import get_stock_service
from src.utils.logger import get_logger

logger = get_logger(__name__)


class WarehouseApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º."""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        self.running = False
        self.start_time = datetime.now()
    
    def get_health_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        try:
            uptime_seconds = (datetime.now() - self.start_time).total_seconds()
            
            return {
                "status": "healthy" if self.running else "starting",
                "uptime_seconds": uptime_seconds,
                "timestamp": datetime.now().isoformat(),
                "components": {
                    "bot": "running" if self.bot else "stopped",
                    "scheduler": "running" if self.scheduler and self.scheduler._running else "stopped",
                    "dispatcher": "running" if self.dp else "stopped"
                }
            }
        except Exception as e:
            logger.error(f"Error getting health status: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
        try:
            logger.info("üöÄ Starting Warehouse Automation System...")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            logger.info("Initializing Telegram bot...")
            self.bot, self.dp = create_bot()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            await self._ensure_single_bot_instance()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            await self._set_bot_commands()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            logger.info("Initializing scheduler service...")
            self.scheduler = get_scheduler_service()
            await self.scheduler.start()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            logger.info("Initializing core services...")
            stock_service = get_stock_service()
            logger.info("Stock service initialized")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
            await self._notify_startup()
            
            self.running = True
            logger.info("‚úÖ All services started successfully!")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            polling_task = asyncio.create_task(
                self.dp.start_polling(
                    self.bot,
                    drop_pending_updates=True,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    timeout=30,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è long polling
                    allowed_updates=None  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                )
            )
            
            logger.info("üì± Bot polling started")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await polling_task
            
        except Exception as e:
            logger.error(f"Failed to start application: {e}")
            await self.stop()
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
        if not self.running:
            return
            
        logger.info("üõë Stopping Warehouse Automation System...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("Scheduler stopped")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                logger.info("Bot session closed")
                
            self.running = False
            logger.info("‚úÖ Application stopped gracefully")
            
        except Exception as e:
            logger.error(f"Error during shutdown: {e}")
    
    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
        from aiogram.types import BotCommand
        
        commands = [
            BotCommand(command="start", description="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            BotCommand(command="receipt", description="–î–æ–¥–∞—Ç–∏ –ø–æ—Å—Ç–∞–≤–∫—É"),
            BotCommand(command="report", description="–ó–≤—ñ—Ç –ø–æ –∑–∞–ª–∏—à–∫–∞–º"),
            BotCommand(command="health", description="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏"),
            BotCommand(command="help", description="–î–æ–≤—ñ–¥–∫–∞"),
            BotCommand(command="cancel", description="–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é")
        ]
        
        await self.bot.set_my_commands(commands)
        logger.info("Bot commands configured")
    
    async def _ensure_single_bot_instance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π."""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
            bot_info = await self.bot.get_me()
            logger.info(f"Bot verified: @{bot_info.username} (ID: {bot_info.id})")
            
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª—è polling)
            await self.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook removed, pending updates dropped")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await asyncio.sleep(1)
            
        except Exception as e:
            logger.warning(f"Error ensuring single bot instance: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
    
    async def _notify_startup(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ."""
        from src.config import settings
        from datetime import datetime
        
        try:
            admin_ids = settings.TELEGRAM_ADMIN_USERS
            if not admin_ids:
                logger.warning("No admin user IDs configured for startup notification")
                return
            
            startup_message = f"""üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>

‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω  
‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞—Ç–∫–æ–≤ –≥–æ—Ç–æ–≤—ã

üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
            
            for admin_id in admin_ids:
                try:
                    await self.bot.send_message(admin_id, startup_message, parse_mode="HTML")
                    logger.debug(f"Startup notification sent to admin {admin_id}")
                except Exception as e:
                    logger.warning(f"Failed to notify admin {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Failed to send startup notifications: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏–∑ health endpoint
warehouse_app_instance = None


async def simple_health_server():
    """–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks."""
    from aiohttp import web
    
    async def health_check(request):
        """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
        if warehouse_app_instance:
            health_data = warehouse_app_instance.get_health_status()
            status = 200 if health_data.get("status") in ["healthy", "starting"] else 503
            return web.json_response(health_data, status=status)
        else:
            return web.json_response({
                "status": "error",
                "error": "Application not initialized",
                "timestamp": datetime.now().isoformat()
            }, status=503)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)  # root —Ç–æ–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç health
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 9001
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 9001)
    await site.start()
    
    logger.info("Health check server started on http://0.0.0.0:9001")
    return runner


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    global warehouse_app_instance
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
    health_runner = await simple_health_server()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = WarehouseApp()
    warehouse_app_instance = app  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è health endpoint
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(sig, frame):
        logger.info(f"Received signal {sig}, shutting down...")
        asyncio.create_task(app.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await app.start()
        
    except KeyboardInterrupt:
        logger.info("Application interrupted by user")
    except Exception as e:
        logger.error(f"Application crashed: {e}")
        raise
    finally:
        await app.stop()
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health —Å–µ—Ä–≤–µ—Ä
        if health_runner:
            await health_runner.cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Application stopped by user")
    except Exception as e:
        logger.error(f"Failed to start application: {e}")
        exit(1)