#!/usr/bin/env python3
"""–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ø–ø–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤."""

import os
import sys
import json
import asyncio
from datetime import date, timedelta
from typing import Dict, List, Set
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
import httpx

def setup_sheets():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets –∫–ª–∏–µ–Ω—Ç–∞."""
    load_dotenv()
    credentials_json = json.loads(os.getenv('GOOGLE_CREDENTIALS_JSON'))
    sheets_id = os.getenv('GSHEETS_ID')
    
    credentials = Credentials.from_service_account_info(
        credentials_json,
        scopes=['https://www.googleapis.com/auth/spreadsheets']
    )
    
    client = gspread.authorize(credentials)
    spreadsheet = client.open_by_key(sheets_id)
    return spreadsheet

def get_all_mappings(spreadsheet):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∏–∑ Google Sheets."""
    try:
        worksheet = spreadsheet.worksheet("Mapping")
        mappings = worksheet.get_all_records()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
        active_mappings = [m for m in mappings if m.get('active', True)]
        return active_mappings
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤: {e}")
        return []

async def get_recent_keycrm_products():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤ KeyCRM."""
    load_dotenv()
    token = os.getenv('KEYCRM_API_TOKEN')
    
    headers = {
        'Authorization': f'Bearer {token}',
        'Accept': 'application/json'
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    start_date = date.today() - timedelta(days=30)
    end_date = date.today()
    
    params = {
        'start_date': start_date.isoformat(),
        'end_date': end_date.isoformat(),
        'limit': 100
    }
    
    products = []
    
    try:
        async with httpx.AsyncClient(
            base_url="https://openapi.keycrm.app/v1", 
            timeout=30.0
        ) as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            response = await client.get("/order", headers=headers, params=params)
            response.raise_for_status()
            
            orders = response.json().get('data', [])
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            for order in orders[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                try:
                    detail_response = await client.get(
                        f"/order/{order['id']}", 
                        headers=headers, 
                        params={'include': 'products'}
                    )
                    detail_response.raise_for_status()
                    order_detail = detail_response.json()
                    
                    for product in order_detail.get('products', []):
                        product_info = {
                            'order_id': order['id'],
                            'product_name': product.get('name', ''),
                            'properties': {}
                        }
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º properties
                        props = product.get('properties', [])
                        if isinstance(props, list):
                            for prop in props:
                                if isinstance(prop, dict):
                                    product_info['properties'][prop.get('name', '')] = prop.get('value', '')
                        
                        products.append(product_info)
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {order['id']}: {e}")
                    continue
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
    
    return products

def analyze_mappings(mappings, keycrm_products):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤."""
    print("\\nüîç –ê–ù–ê–õ–ò–ó –ú–ê–ü–ü–ò–ù–ì–û–í")
    print("=" * 60)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
    mapping_by_product = {}
    for mapping in mappings:
        product_name = mapping.get('product_name', '').strip().lower()
        if product_name:
            if product_name not in mapping_by_product:
                mapping_by_product[product_name] = []
            mapping_by_product[product_name].append(mapping)
    
    print(f"üìã –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤: {len(mappings)}")
    print(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {len(mapping_by_product)}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ KeyCRM
    covered_products = set()
    uncovered_products = []
    
    for product in keycrm_products:
        product_name = product['product_name'].strip().lower()
        color = product['properties'].get('–ö–æ–ª—ñ—Ä', '').strip()
        size = product['properties'].get('–†–æ–∑–º—ñ—Ä', '').strip()
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞–ø–ø–∏–Ω–≥
        found_mapping = False
        
        if product_name in mapping_by_product:
            for mapping in mapping_by_product[product_name]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ)
                mapping_color = mapping.get('metal_color', '').strip()
                color_match = (not mapping_color or mapping_color.lower() == color.lower())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ)  
                mapping_size = mapping.get('size_property', '').strip()
                size_match = (not mapping_size or mapping_size.lower() == size.lower())
                
                if color_match and size_match:
                    found_mapping = True
                    covered_products.add(f"{product_name} ({color}, {size})")
                    break
        
        if not found_mapping:
            uncovered_products.append({
                'name': product['product_name'],
                'properties': product['properties'],
                'order_id': product['order_id']
            })
    
    print(f"‚úÖ –¢–æ–≤–∞—Ä–æ–≤ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º: {len(covered_products)}")
    print(f"‚ùå –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞: {len(uncovered_products)}")
    
    if uncovered_products:
        print("\\n‚ö†Ô∏è  –¢–û–í–ê–†–´ –ë–ï–ó –ú–ê–ü–ü–ò–ù–ì–ê:")
        unique_uncovered = {}
        for product in uncovered_products:
            key = f"{product['name']}_{json.dumps(product['properties'], sort_keys=True)}"
            if key not in unique_uncovered:
                unique_uncovered[key] = product
        
        for i, product in enumerate(unique_uncovered.values(), 1):
            print(f"  {i}. {product['name']}")
            if product['properties']:
                for prop_name, prop_value in product['properties'].items():
                    print(f"     ‚Ä¢ {prop_name}: {prop_value}")
            print(f"     üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {product['order_id']}")
            print()

def show_mapping_structure(mappings):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞–ø–ø–∏–Ω–≥–æ–≤."""
    print("\\nüìã –°–¢–†–£–ö–¢–£–†–ê –ú–ê–ü–ü–ò–ù–ì–û–í")
    print("=" * 60)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    by_product = {}
    for mapping in mappings:
        product_name = mapping.get('product_name', '').strip()
        if product_name:
            if product_name not in by_product:
                by_product[product_name] = []
            by_product[product_name].append(mapping)
    
    for product_name, product_mappings in by_product.items():
        print(f"üì¶ {product_name} ({len(product_mappings)} –º–∞–ø–ø–∏–Ω–≥–æ–≤)")
        
        for i, mapping in enumerate(product_mappings, 1):
            sku = mapping.get('blank_sku', '–ù–ï–¢ SKU').strip()
            metal_color = mapping.get('metal_color', '').strip() or '–ª—é–±–æ–π'
            size = mapping.get('size_property', '').strip() or '–ª—é–±–æ–π'
            priority = mapping.get('priority', 0)
            qty_per_unit = mapping.get('qty_per_unit', 1)
            
            print(f"  {i}. SKU: {sku}")
            print(f"     ‚Ä¢ –¶–≤–µ—Ç: {metal_color}")
            print(f"     ‚Ä¢ –†–∞–∑–º–µ—Ä: {size}")
            print(f"     ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
            print(f"     ‚Ä¢ –†–∞—Å—Ö–æ–¥ –Ω–∞ 1—à—Ç: {qty_per_unit}")
            
        print()

def check_mapping_completeness(mappings):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –º–∞–ø–ø–∏–Ω–≥–æ–≤."""
    print("\\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´ –ú–ê–ü–ü–ò–ù–ì–û–í")
    print("=" * 60)
    
    issues = []
    
    for mapping in mappings:
        product_name = mapping.get('product_name', '').strip()
        blank_sku = mapping.get('blank_sku', '').strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not product_name:
            issues.append("‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        
        if not blank_sku:
            issues.append(f"‚ùå –ù–µ—Ç SKU –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}")
        
        qty_per_unit = mapping.get('qty_per_unit')
        if not qty_per_unit or qty_per_unit <= 0:
            issues.append(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è {product_name}: {qty_per_unit}")
    
    if issues:
        print("üîß –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"  {issue}")
    else:
        print("‚úÖ –í—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ú–ê–ü–ü–ò–ù–ì–û–í –¢–û–í–ê–†–û–í")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∏–∑ Google Sheets...")
    spreadsheet = setup_sheets()
    mappings = get_all_mappings(spreadsheet)
    
    print("2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤ KeyCRM...")
    keycrm_products = await get_recent_keycrm_products()
    
    # –ê–Ω–∞–ª–∏–∑—ã
    analyze_mappings(mappings, keycrm_products)
    show_mapping_structure(mappings)
    check_mapping_completeness(mappings)
    
    print("\\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è")
    print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Å—Ç—ã–µ SKU –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞–ø–ø–∏–Ω–≥–∞—Ö")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å qty_per_unit")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤")
    
    print("\\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main())