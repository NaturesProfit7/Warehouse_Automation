#!/usr/bin/env python3
"""–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å KeyCRM API —Ç–æ–∫–µ–Ω–æ–º."""

import os
import base64
import asyncio
import httpx
from dotenv import load_dotenv

def analyze_token_format():
    """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞."""
    load_dotenv()
    
    token = os.getenv("KEYCRM_API_TOKEN")
    print("üîç –ê–ù–ê–õ–ò–ó API –¢–û–ö–ï–ù–ê KeyCRM")
    print("="*60)
    
    print(f"–¢–æ–∫–µ–Ω: {token}")
    print(f"–î–ª–∏–Ω–∞: {len(token)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ü–µ—Ä–≤—ã–µ 10: {token[:10]}...")
    print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: ...{token[-10:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω base64
    try:
        decoded = base64.b64decode(token)
        print(f"‚úÖ –≠—Ç–æ Base64 —Å—Ç—Ä–æ–∫–∞")
        print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {decoded.decode('utf-8', errors='ignore')}")
    except:
        print(f"‚ùå –ù–µ Base64 —Å—Ç—Ä–æ–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω hex
    try:
        bytes.fromhex(token)
        print(f"‚úÖ –≠—Ç–æ HEX —Å—Ç—Ä–æ–∫–∞")
    except:
        print(f"‚ùå –ù–µ HEX —Å—Ç—Ä–æ–∫–∞")
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
    has_upper = any(c.isupper() for c in token)
    has_lower = any(c.islower() for c in token)
    has_digits = any(c.isdigit() for c in token)
    has_special = any(not c.isalnum() for c in token)
    
    print(f"\n–°–æ—Å—Ç–∞–≤ —Ç–æ–∫–µ–Ω–∞:")
    print(f"  –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã: {'‚úÖ' if has_upper else '‚ùå'}")
    print(f"  –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã: {'‚úÖ' if has_lower else '‚ùå'}")
    print(f"  –¶–∏—Ñ—Ä—ã: {'‚úÖ' if has_digits else '‚ùå'}")
    print(f"  –°–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã: {'‚úÖ' if has_special else '‚ùå'}")

async def test_different_approaches():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ API."""
    
    load_dotenv()
    token = os.getenv("KEYCRM_API_TOKEN")
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• –ü–û–î–•–û–î–û–í")
    print("="*60)
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–±–ª–µ–º—ã
    test_scenarios = [
        {
            "name": "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –≤–æ–æ–±—â–µ",
            "url": "https://api.keycrm.app",
            "method": "GET",
            "headers": {},
            "description": "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ API —Å–µ—Ä–≤–µ—Ä"
        },
        {
            "name": "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞",
            "url": "https://api.keycrm.app/orders",
            "method": "GET", 
            "headers": {"Content-Type": "application/json"},
            "description": "–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        },
        {
            "name": "3. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –≤–µ—Ä—Å–∏—è API",
            "url": "https://api.keycrm.app/v1/orders",
            "method": "GET",
            "headers": {"Authorization": f"Bearer {token}"},
            "description": "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –≤–µ—Ä—Å–∏–µ–π v1"
        },
        {
            "name": "4. –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ openapi –ø–æ–¥–¥–æ–º–µ–Ω",
            "url": "https://openapi.keycrm.app/orders",
            "method": "GET", 
            "headers": {"Authorization": f"Bearer {token}"},
            "description": "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–æ–º–µ–Ω openapi"
        },
        {
            "name": "5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å User-Agent",
            "url": "https://api.keycrm.app/orders",
            "method": "GET",
            "headers": {
                "Authorization": f"Bearer {token}",
                "User-Agent": "KeyCRM-Integration/1.0"
            },
            "description": "–î–æ–±–∞–≤–ª—è–µ–º User-Agent"
        }
    ]
    
    for scenario in test_scenarios:
        print(f"\n{scenario['name']}")
        print(f"URL: {scenario['url']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {scenario['description']}")
        
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.request(
                    scenario['method'],
                    scenario['url'], 
                    headers=scenario['headers']
                )
                
                print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"  Content-Type: {response.headers.get('Content-Type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                
                # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                if response.status_code == 401:
                    print(f"  üîë –¢–†–ï–ë–£–ï–¢–°–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø")
                elif response.status_code == 403:
                    print(f"  üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù (—Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π)")
                elif response.status_code == 404:
                    print(f"  ‚ùå ENDPOINT –ù–ï –ù–ê–ô–î–ï–ù")
                elif "application/json" in response.headers.get('Content-Type', ''):
                    print(f"  ‚úÖ JSON –û–¢–í–ï–¢!")
                    try:
                        data = response.json()
                        print(f"  –î–∞–Ω–Ω—ã–µ: {list(data.keys()) if isinstance(data, dict) else data}")
                    except:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                else:
                    print(f"  üìÑ HTML –æ—Ç–≤–µ—Ç (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)")
                    
        except Exception as e:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")

def check_token_source():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç —Ç–æ–∫–µ–Ω."""
    
    print(f"\nüìã –ì–î–ï –í–ó–Ø–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–´–ô API –¢–û–ö–ï–ù")
    print("="*60)
    
    print("–í KeyCRM API —Ç–æ–∫–µ–Ω –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤:")
    print("1. üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ‚Üí API")
    print("2. üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ‚Üí API –∫–ª—é—á–∏")
    print("3. üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Üí API —Ç–æ–∫–µ–Ω—ã")
    print("4. ‚öôÔ∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí API –¥–æ—Å—Ç—É–ø")
    
    print(f"\n‚ùó –í–ê–ñ–ù–´–ï –ú–û–ú–ï–ù–¢–´:")
    print("‚Ä¢ –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
    print("‚Ä¢ –£ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤") 
    print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ API —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω–∫–µ")
    print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ IP –∏–ª–∏ –¥–æ–º–µ–Ω—É")
    
    print(f"\nüîç –ß–¢–û –ü–†–û–í–ï–†–ò–¢–¨ –í KeyCRM:")
    print("1. –ó–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å KeyCRM")
    print("2. –ù–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª API/–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API (–≤–∫–ª—é—á–µ–Ω/–≤—ã–∫–ª—é—á–µ–Ω)")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞")
    print("5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
    print("6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ IP")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    
    analyze_token_format()
    await test_different_approaches() 
    check_token_source()
    
    print(f"\nüéØ –í–´–í–û–î")
    print("="*60)
    print("–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    print("1. üîë API —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫")
    print("2. ‚ö° API –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö KeyCRM")
    print("3. üîí –£ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤")
    print("4. üåê –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API")
    print("5. üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ IP/–¥–æ–º–µ–Ω—É")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –≤ KeyCRM –∞–¥–º–∏–Ω–∫–µ")
    print("2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω")
    print("3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ API –≤–∫–ª—é—á–µ–Ω")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())