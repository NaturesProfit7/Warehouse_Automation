#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã Current_Stock –∏–∑ Master_Blanks."""

import asyncio
import sys
from datetime import datetime

from src.integrations.sheets import get_sheets_client
from src.core.models import CurrentStock
from src.utils.logger import get_logger

logger = get_logger(__name__)


async def init_current_stock_from_master():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Current_Stock –∏–∑ Master_Blanks —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏."""
    
    try:
        logger.info("Starting Current_Stock initialization...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Sheets
        sheets_client = get_sheets_client()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Master_Blanks
        master_blanks = sheets_client.get_master_blanks()
        logger.info(f"Retrieved {len(master_blanks)} master blanks")
        
        # –°–æ–∑–¥–∞–µ–º Current_Stock –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        current_stocks = []
        for blank in master_blanks:
            if blank.active:  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ SKU
                stock = CurrentStock(
                    blank_sku=blank.blank_sku,
                    on_hand=blank.opening_stock or 0,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º opening_stock –∏–ª–∏ 0
                    reserved=0,
                    available=blank.opening_stock or 0,
                    last_receipt_date=None,
                    last_order_date=None,
                    avg_daily_usage=0.0,
                    days_of_stock=None,
                    last_updated=datetime.now()
                )
                current_stocks.append(stock)
                logger.info(f"Prepared stock record: {blank.blank_sku} = {stock.on_hand}")
        
        # –û—á–∏—â–∞–µ–º Current_Stock –ª–∏—Å—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –ª–∏—Å—Ç Current_Stock!")
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        worksheet = sheets_client._get_worksheet("Current_Stock")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            "blank_sku", "on_hand", "reserved", "available",
            "last_receipt_date", "last_order_date", "avg_daily_usage",
            "days_of_stock", "last_updated"
        ]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_to_write = [headers]
        for stock in current_stocks:
            row = [
                stock.blank_sku,
                stock.on_hand,
                stock.reserved,
                stock.available,
                stock.last_receipt_date.isoformat() if stock.last_receipt_date else "",
                stock.last_order_date.isoformat() if stock.last_order_date else "",
                stock.avg_daily_usage,
                stock.days_of_stock or "",
                stock.last_updated.isoformat()
            ]
            data_to_write.append(row)
        
        # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç
        worksheet.clear()
        logger.info("Cleared Current_Stock worksheet")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        rows = len(data_to_write)
        cols = len(headers)
        range_name = f"A1:{chr(65 + cols - 1)}{rows}"
        
        worksheet.batch_update([{
            'range': range_name,
            'values': data_to_write
        }])
        
        logger.info(f"‚úÖ Successfully initialized Current_Stock with {len(current_stocks)} records")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
        for stock in current_stocks:
            print(f"  {stock.blank_sku}: {stock.on_hand} —à—Ç")
            
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(current_stocks)} SKU –≤ Current_Stock")
        
    except Exception as e:
        logger.error(f"Failed to initialize Current_Stock: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(init_current_stock_from_master())
    except KeyboardInterrupt:
        logger.info("Operation cancelled by user")
    except Exception as e:
        logger.error(f"Script failed: {e}")
        sys.exit(1)